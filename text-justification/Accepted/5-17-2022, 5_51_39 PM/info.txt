{"id":701367425,"question_id":68,"lang":"csharp","lang_name":"C#","time":"2 years, 5 months","timestamp":1652788299,"status":10,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/701367425/","is_pending":"Not Pending","title":"Text Justification","memory":"43.5 MB","code":"public class Solution {\n\n    public String left_justify(String [] word , int diff , int i , int j)\n    {\n        int num_of_word = j - i ;\n        int gap = num_of_word - 1;\n        int space_right = diff - gap;\n\n        StringBuilder res = new StringBuilder(word[i]);\n        for(int k = i+1 ; k<j;k++)\n        {\n            res.Append(' ');\n            res.Append(word[k]);\n        }\n        int remaining = space_right;\n        while(remaining > 0) {\n            res.Append(' ');\n            remaining--;\n        }\n        return res.ToString();\n    }\n\n    public String middle_justify(String [] word , int diff , int i , int j)\n    {\n        int num_of_word = j - i ;\n        int spaces = diff / (num_of_word - 1);\n        int extra = diff % (num_of_word - 1);\n\n        StringBuilder res = new StringBuilder(word[i]);\n        for(int k = i+1 ; k<j;k++)\n        {\n            int remaining = spaces + ( extra > 0 ? 1 : 0 );\n            extra--;\n            while(remaining > 0)\n                {\n                    res.Append(' ');\n                    remaining -= 1;\n                }\n            res.Append(word[k]);\n        }\n        return res.ToString();\n    }\n\n    public List<string> FullJustify(string[] word, int maxWidth) {\n\n        List<String>result = new List<String>();\n        int i = 0 , n = word.Length;\n        while(i<n)\n        {\n            int j = i + 1;\n            int linelen = word[i].Length;\n            while(j < n && linelen + word[j].Length + ( j - i - 1) < maxWidth)\n            {\n                linelen = linelen + word[j].Length;\n                j++;\n            }\n            int diff = maxWidth - linelen;\n            int num_of_word = j - i ;\n            if(num_of_word == 1 || j >= n)\n            {\n                // left justified\n                result.Add(left_justify(word , diff , i , j ));\n            }\n            else\n            {\n                // middle justify\n                result.Add(middle_justify(word , diff , i , j ));\n            }\n\n            i = j ;\n        }\n\n        return result;\n\n    }\n}\n","compare_result":"111111111111111111111111111","title_slug":"text-justification","has_notes":false,"flag_type":1}