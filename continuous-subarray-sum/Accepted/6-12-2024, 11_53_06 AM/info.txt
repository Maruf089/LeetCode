{"id":1285629042,"question_id":523,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1718171586,"status":10,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/1285629042/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"134.5 MB","code":"class Solution {\npublic:\n    bool checkSubarraySum(vector<int>& nums, int k) {\n        int prefixMod = 0;\n        unordered_map<int, int> modSeen;\n        modSeen[0] = -1;\n\n        for (int i = 0; i < nums.size(); i++) {\n            prefixMod = (prefixMod + nums[i]) % k;\n\n            if (modSeen.find(prefixMod) != modSeen.end()) {\n                // ensures that the size of subarray is atleast 2\n                if (i - modSeen[prefixMod] > 1) {\n                    return 1;\n                }\n            } else {\n                // mark the value of prefixMod with the current index.\n                modSeen[prefixMod] = i;\n            }\n        }\n\n        return 0;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"continuous-subarray-sum","has_notes":false,"flag_type":1}