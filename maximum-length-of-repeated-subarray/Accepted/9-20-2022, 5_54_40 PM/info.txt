{"id":804427099,"question_id":718,"lang":"cpp","lang_name":"C++","time":"2Â years","timestamp":1663674880,"status":10,"status_display":"Accepted","runtime":"193 ms","url":"/submissions/detail/804427099/","is_pending":"Not Pending","title":"Maximum Length of Repeated Subarray","memory":"12.3 MB","code":"class Solution {\npublic:\n    int findLength(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() < nums2.size())\n        swap(nums1, nums2);\n\n    const int n2 = nums2.size();\n    vector<int> indices2[101];\n    for (int i = 0; i < n2; ++i)\n        indices2[nums2[i]].emplace_back(i);\n\n    vector<int> dp0(n2 + 1), dp1(n2 + 1);\n    vector<int>& prev = dp0;\n    vector<int>& curr = dp1;\n    int answer = 0, count = sizeof(int) * prev.size();\n    for (int num : nums1) {\n        memset(prev.data(), 0, count);\n        swap(prev, curr);\n        for (int i : indices2[num])\n            answer = max(answer, curr[i + 1] = prev[i] + 1);\n    }\n    return answer;\n}\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-length-of-repeated-subarray","has_notes":false,"flag_type":1}