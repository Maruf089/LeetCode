{"id":653609991,"question_id":133,"lang":"cpp","lang_name":"C++","time":"2 years, 7 months","timestamp":1646459944,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/653609991/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\n// Solution 1 using DFS\n\n// class Solution {\n// public:\n    \n//     void dfs(Node *node,Node *copy,vector<Node*>&vis)\n//     {\n//         vis[copy->val] = copy;\n        \n//         for(auto it : node->neighbors)\n//         {\n//             if(vis[it->val] == NULL)\n//             {\n//                 Node *Newnode = new Node(it->val);\n//                 (copy->neighbors).push_back(Newnode);\n//                 dfs(it,Newnode,vis);\n//             }\n//             else\n//             {\n//                  (copy->neighbors).push_back(vis[it->val]);\n//             }\n//         }\n        \n//     }\n    \n//     Node* cloneGraph(Node* node) {\n        \n//         if( node == NULL )\n//             return NULL;\n        \n//         Node* copy = new Node(node->val);\n        \n        \n//         vector<Node*>visited(1000,NULL);\n        \n//         dfs(node,copy,visited);\n        \n//         return copy;\n        \n//     }\n// };\n\n\n// Solution 2 Using BFS\nclass Solution {\n    \n    public:\n    \n    map<Node*,Node*>mp;\n    Node* cloneGraph(Node* node) {\n        \n        if(node == NULL)\n            return NULL;\n        \n        Node* clone = new Node(node->val);\n        mp[node] = clone;\n        \n        queue<Node*>Q;\n        Q.push(node);\n        \n        while(Q.size())\n        {\n            auto curr = Q.front();\n            Q.pop();\n            \n            for(auto it : curr->neighbors)\n            {\n                if( mp.find(it) != mp.end() )\n                {\n                    \n                    (mp[curr]->neighbors).push_back(mp[it]);\n                    \n                }\n                else\n                {\n                    mp[it] = new Node(it->val);\n                    (mp[curr]->neighbors).push_back(mp[it]);\n                    Q.push(it);\n                    \n                }\n            }\n        }\n        \n        return mp[node];\n        \n    }\n    \n};\n\n","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}