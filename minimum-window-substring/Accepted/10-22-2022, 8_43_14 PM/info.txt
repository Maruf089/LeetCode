{"id":827956808,"question_id":76,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1666449794,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/827956808/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"47.4 MB","code":"class Solution {\n    public String minWindow(String s, String t) {\n\n        if (s.length() == 0 || t.length() == 0) {\n            return \"\";\n        }\n\n        // Dictionary which keeps a count of all the unique characters in t.\n        Map<Character, Integer> dictT = new HashMap<Character, Integer>();\n        for (int i = 0; i < t.length(); i++) {\n            int count = dictT.getOrDefault(t.charAt(i), 0);\n            dictT.put(t.charAt(i), count + 1);\n        }\n\n        // Number of unique characters in t, which need to be present in the desired window.\n        int required = dictT.size();\n\n        // Left and Right pointer\n        int l = 0, r = 0;\n\n        // formed is used to keep track of how many unique characters in t\n        // are present in the current window in its desired frequency.\n        // e.g. if t is \"AABC\" then the window must have two A's, one B and one C.\n        // Thus formed would be = 3 when all these conditions are met.\n        int formed = 0;\n\n        // Dictionary which keeps a count of all the unique characters in the current window.\n        Map<Character, Integer> windowCounts = new HashMap<Character, Integer>();\n\n        // ans list of the form (window length, left, right)\n        int[] ans = { -1, 0, 0 };\n\n        while (r < s.length()) {\n            // Add one character from the right to the window\n            char c = s.charAt(r);\n            int count = windowCounts.getOrDefault(c, 0);\n            windowCounts.put(c, count + 1);\n\n            // If the frequency of the current character added equals to the\n            // desired count in t then increment the formed count by 1.\n            if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {\n                formed++;\n            }\n\n            // Try and contract the window till the point where it ceases to be 'desirable'.\n            while (l <= r && formed == required) {\n                c = s.charAt(l);\n                // Save the smallest window until now.\n                if (ans[0] == -1 || r - l + 1 < ans[0]) {\n                    ans[0] = r - l + 1;\n                    ans[1] = l;\n                    ans[2] = r;\n                }\n\n                // The character at the position pointed by the\n                // `Left` pointer is no longer a part of the window.\n                windowCounts.put(c, windowCounts.get(c) - 1);\n                if (dictT.containsKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {\n                    formed--;\n                }\n\n                // Move the left pointer ahead, this would help to look for a new window.\n                l++;\n            }\n\n            // Keep expanding the window once we are done contracting.\n            r++;\n        }\n\n        return ans[0] == -1 ? \"\" : s.substring(ans[1], ans[2] + 1);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}