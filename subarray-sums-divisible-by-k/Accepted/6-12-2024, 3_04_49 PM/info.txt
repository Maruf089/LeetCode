{"id":1285798606,"question_id":1016,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1718183089,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1285798606/","is_pending":"Not Pending","title":"Subarray Sums Divisible by K","memory":"35.1 MB","code":"class Solution {\npublic:\n    int subarraysDivByK(std::vector<int>& nums, int k) {\n        // Initialize count of subarrays, prefix sum, and hash map for remainders\n        int count = 0;\n        int prefixSum = 0;\n        std::unordered_map<int, int> prefixMap;\n        prefixMap[0] = 1; // To handle subarrays that start from the beginning\n\n        for (int num : nums) {\n            // Update prefix sum\n            prefixSum += num;\n            \n            // Calculate the remainder of the prefix sum divided by k\n            int mod = prefixSum % k;\n            \n            // Adjust negative remainders to be positive\n            if (mod < 0) {\n                mod += k;\n            }\n            \n            // If this remainder has been seen before, it means there are subarrays ending here that are divisible by k\n            if (prefixMap.find(mod) != prefixMap.end()) {\n                count += prefixMap[mod];\n                prefixMap[mod] += 1;\n            } else {\n                prefixMap[mod] = 1;\n            }\n        }\n        \n        return count; // Total number of subarrays divisible by k\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subarray-sums-divisible-by-k","has_notes":false,"flag_type":1}