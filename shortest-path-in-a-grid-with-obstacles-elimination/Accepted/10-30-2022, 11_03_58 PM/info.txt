{"id":833471997,"question_id":1414,"lang":"cpp","lang_name":"C++","time":"1 year, 11 months","timestamp":1667149438,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/833471997/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"9.8 MB","code":"class Solution {\npublic:\n    const int dx[4] = { -1, 0, 0, 1 }, dy[4] = { 0, -1, 1, 0 };\n    // if you are working on 8 directions, then you can use\n    // const int dx[8]= { -1, 0, 0, 1, -1, -1, 1, 1 },\n    //           dy[8]= { 0, 1, -1, 0, -1, 1, -1, 1 };\n    \n    int shortestPath(vector<vector<int>>& grid, int k) {\n        int m = grid.size(), n = grid[0].size(), steps = 0;\n        vector<vector<int>> remains(m, vector<int>(n, INT_MIN));\n        // we have a queue storing {x, y, k} \n        // where x and y are coordinate \n        // and r is remain number of obstacles you can remove\n        queue<array<int, 3>> q;\n        // we start at (0, 0) with k\n        q.push({0, 0, k});\n        // at the beginning, you can eliminate at most k obstacles\n        remains[0][0] = k;\n        // BFS\n        while (!q.empty()) {\n            for (int it = q.size(); it > 0; it--) {\n                auto cur = q.front(); q.pop();\n                // if we reach the lower right corner (m - 1, n - 1)\n                // then return the minimum number of steps\n                if (cur[0] == m - 1 && cur[1] == n - 1) return steps;\n                // otherwise we can try 4 directions (up, down, left and right)\n                for (int i = 0; i < 4; i++) {\n                    // given we have at (x, y), we can move to (next_x, next_y)\n                    int next_x = cur[0] + dx[i], next_y = cur[1] + dy[i];\n                    // however, first we need to make sure (next_x, next_y) is within the grid\n                    if(next_x < 0 || next_x >= m || next_y < 0 || next_y >= n) continue;\n                    // then, we check if we can eliminate an obstacle and move there\n                    int remain = cur[2] - grid[next_x][next_y];\n                    // we can only do that when `remain` is greater or equal to 0\n                    // and the target remaining k must be less than the current remaining k\n                    if(remain >= 0 && remains[next_x][next_y] < remain) {\n                        // push to the queue for further process\n                        q.push({next_x, next_y, remain});\n                        // update the remaining k\n                        remains[next_x][next_y] = remain;\n                    }\n                }\n            }\n            // increase step count\n            steps += 1;\n        }\n        // if we reach here, \n        // then it means it is not possible to find such walk \n        return -1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false,"flag_type":1}