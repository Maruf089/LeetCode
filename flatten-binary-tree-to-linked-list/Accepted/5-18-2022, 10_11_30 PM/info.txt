{"id":702184597,"question_id":114,"lang":"csharp","lang_name":"C#","time":"2 years, 5 months","timestamp":1652890290,"status":10,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/702184597/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"37.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public void Flatten(TreeNode root) {\n        if(root==null) return;\n        \n        var temp=new List<TreeNode>();\n        DFS( root,temp);\n        for(int i=1;i<temp.Count;i++)\n        {\n            root.left=null;\n            root.right = temp[i];\n            temp[i].left=null;\n            root = root.right;\n        }\n        \n    }\n    public void DFS(TreeNode root,List<TreeNode> temp)\n    {\n        if(root==null) return;\n        temp.Add(root);\n        DFS(root.left,temp);\n        DFS(root.right,temp);\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}