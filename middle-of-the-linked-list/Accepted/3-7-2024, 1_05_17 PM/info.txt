{"id":1196473432,"question_id":908,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1709795117,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1196473432/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"8.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        int count = 1, count1 = 1 ;\n        ListNode* root = head;\n        while(head->next)\n        {\n            count++;\n            head = head->next;\n        };\n        if(count==1)\n            return head;\n        cout << count << endl;\n\n    \n        count = count / 2  + 1;\n\n        \n        cout << count << endl;\n\n        while(count != count1)\n        {\n            count1++;\n            root = root->next;\n        };\n\n        return root;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list","has_notes":false,"flag_type":1}